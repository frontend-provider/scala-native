package scala.scalanative
package native

import scala.reflect.ClassTag
import scalanative.runtime.intrinsic

final abstract class Tag[P]

object Tag {
  implicit val Unit: Tag[Unit]                    = intrinsic
  implicit val Boolean: Tag[Boolean]              = intrinsic
  implicit val Char: Tag[Char]                    = intrinsic
  implicit val Byte: Tag[Byte]                    = intrinsic
  implicit val UByte: Tag[UByte]                  = intrinsic
  implicit val Short: Tag[Short]                  = intrinsic
  implicit val UShort: Tag[UShort]                = intrinsic
  implicit val Int: Tag[Int]                      = intrinsic
  implicit val UInt: Tag[UInt]                    = intrinsic
  implicit val Long: Tag[Long]                    = intrinsic
  implicit val ULong: Tag[ULong]                  = intrinsic
  implicit val Float: Tag[Float]                  = intrinsic
  implicit val Double: Tag[Double]                = intrinsic
  implicit def Ptr[T: Tag]: Tag[Ptr[T]]           = intrinsic
  implicit def Ref[T <: AnyRef: ClassTag]: Tag[T] = intrinsic

  implicit def Nat0: Tag[Nat._0] = intrinsic
  implicit def Nat1: Tag[Nat._1] = intrinsic
  implicit def Nat2: Tag[Nat._2] = intrinsic
  implicit def Nat3: Tag[Nat._3] = intrinsic
  implicit def Nat4: Tag[Nat._4] = intrinsic
  implicit def Nat5: Tag[Nat._5] = intrinsic
  implicit def Nat6: Tag[Nat._6] = intrinsic
  implicit def Nat7: Tag[Nat._7] = intrinsic
  implicit def Nat8: Tag[Nat._8] = intrinsic
  implicit def Nat9: Tag[Nat._9] = intrinsic
  implicit def NatDigit[N <: Nat.Base: Tag, M <: Nat: Tag]: Tag[Nat.Digit[N, M]] =
    intrinsic

  implicit def CArray[T: Tag, N <: Nat: Tag]: Tag[CArray[T, N]] = intrinsic

  % for N in range(0, 23):
  %   Ts      = ["T" + str(i) for i in range(1, N + 1)]
  %   BoundTs = "" if N == 0 else "[" + ", ".join(map(lambda T: T + ": Tag", Ts)) + "]"
  %   JustTs  = "" if N == 0 else "[" + ", ".join(Ts) + "]"

  implicit def CStruct${N}${BoundTs}: Tag[CStruct${N}${JustTs}] = intrinsic

  % end
}
